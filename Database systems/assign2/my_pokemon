#! /usr/bin/env python3


"""
COMP3311
23T1
Assignment 2
Pokemon Database

Written by: Ezekiel Tay Z5378748
Written on: 3/4/2023

My Pokemon

Create your very own Pokemon
"""


import sys
import psycopg2
import helpers
from random import Random


### Constants
USAGE = f"Usage: {sys.argv[0]} <Seed>"


### Globals
db = None
Seed = None
rng = None
MAX_ABILITIES = 4

### Command-line args
if len(sys.argv) != 2:
    print(USAGE, file=sys.stderr)
Seed = int(sys.argv[1]) # read the seed from the command line
rng = Random(Seed) # set the seed for the python random number generator

# `rng` is a python Random number generator
# `rng.random()` returns a random float between 0 and 1
# `rng.randint(a, b)` returns a random integer between a and b (inclusive)

# `SELECT setseed(seed);` sets the postgres random seed to `seed`
# `SELECT * FROM Table ORDER BY random() LIMIT 5;` gives 5 random rows from the table `Table`
# `SELECT setseed(seed);` should be used once, before any calls to random(), with the a random number generated by `rng.random()`

def menu(items: list[str]) -> int:
    """
    Given a list of strings,
    print a numbered menu
    and return the user's selection.
    """
    padding = len(str(len(items)))
    print(f"Select an option from the menu below by entering its number:")
    for i, item in enumerate(items):
        print(f"{i+1:{padding}}) {item}")
    ret = int(input("> Selection: ")) - 1
    if not sys.stdin.isatty():
        print(f"{ret+1}")
    print()
    return ret


def main():
    seed = rng.random()
    cur = db.cursor()

    # User is given 10 game options to choose from
    cur.execute(f"SELECT setseed({seed})")
    show_ten_games_query = "select name from games ORDER BY random() LIMIT 10"
    cur.execute(show_ten_games_query)
    games_list:list = []
    for name in cur.fetchall():
        games_list.append(name[0])
    # Display 10 games as a menu
    user_select = menu(games_list)
    game_choice = games_list[user_select]
    format_game_choice = helpers.format_string_query_search(game_choice)

    #User is given 10 pokemons to choose from
    show_ten_pokemon_query = f"select p_name from pokemon_exist_in_game where g_name ilike '{format_game_choice}' ORDER BY random() LIMIT 10"    
    cur.execute(show_ten_pokemon_query)
    pokemons_list: list = []
    for name, in cur.fetchall():
        pokemons_list.append(name)
    # Display 10 pokemons as a menu
    user_select = menu(pokemons_list)
    pokemon_choice = pokemons_list[user_select]
    format_pokemon_choice = helpers.format_string_query_search(pokemon_choice)
    
    #User asked to select Pokemon's ability
    show_pokemon_abilities = f"select distinct p_abilities from pokemon_abilities where p_name ilike '{format_pokemon_choice}'"
    cur.execute(show_pokemon_abilities)
    pokemon_abilities: list = []
    list = cur.fetchall()
    if len(list) > 0:
        for ability, in list:
            pokemon_abilities.append(ability)
        user_select = menu(pokemon_abilities)
        ability_choice = pokemon_abilities[user_select]
    else:
        ability_choice = "None"

    # Append all available moves to a list.
    show_pokemon_moves = f"""
        select Distinct m_name 
        from pokemon_learnable_moves 
        where g_name = '{format_game_choice}' and p_name = '{format_pokemon_choice}'
    """
    cur.execute(show_pokemon_moves)
    pokemon_moves: list = []
    move_choices: list = []
    for move_name, in cur.fetchall():
        pokemon_moves.append(move_name)

    # User asked to select at most 4 pokemon moves
    count = 0
    max_len_move = 0
    while count < 4 and len(pokemon_moves) > 0:
        user_select = menu(pokemon_moves)
        move_choices.append(pokemon_moves[user_select])
        if max_len_move < len(pokemon_moves[user_select]):
            max_len_move = len(pokemon_moves[user_select])
        pokemon_moves.pop(user_select)
        count += 1
    
    #Determine pokemon species and type
    get_pokemon_details = f"""
        select * 
        from pokemon_exist_in_game 
        where g_name ilike '{format_game_choice}' and p_name ilike '{format_pokemon_choice}'"""
    cur.execute(get_pokemon_details)
    game_choice, region_id_choice, dual_pokemon_id_choice, pokemon_choice, species_choice, type_choice_one, type_choice_two = cur.fetchone()

    # Get Pokemon type one and type two (if applicable)
    type_choice = type_choice_one
    if type_choice_two != None:
        type_choice += f" + {type_choice_two}"
    pokemon_id_choice = dual_pokemon_id_choice.split(',')[0]
    pokemon_id_choice = pokemon_id_choice.split('(')[1]

    print(f"Here is your new Pokemon (from Pokemon {game_choice}):")
    print()
    print(f"Name: {pokemon_choice}")
    print(f"Species: {species_choice}")
    print(f"Type: {type_choice}")
    print(f"Pokedex Number: {region_id_choice} ({pokemon_id_choice})")
    print()
    print(f"Ability: {ability_choice}")
    print()
    print("Moves:")

    # Determine len of longest category string
    count = 0
    max_len_type = 0
    while count < MAX_ABILITIES and count < len(move_choices):
        m_name = move_choices[count]
        type_details = f"select m_of_type from move_details where m_name ilike '{helpers.format_string_query_search(m_name)}'"
        cur.execute(type_details)
        m_type, = cur.fetchone()
        if max_len_type < len(m_type):
            max_len_type = len(m_type)
        count += 1

    count = 0
    # Print out each move details to a maximum of 4.
    while count < MAX_ABILITIES and count < len(move_choices):
        m_name = move_choices[count]
        move_details = f"select m_of_type, m_category, m_power, m_accuracy from move_details where m_name ilike '{helpers.format_string_query_search(m_name)}'"
        cur.execute(move_details)
        m_type, m_category, m_power, m_accuracy = cur.fetchone()
        m_type = f"[{m_type}]"
        
        # max_len_type + 2 to account for '[]' added to m_type
        print(f"\t{m_name:<{max_len_move}} {m_type:<{max_len_type + 2}} (Category: {m_category}, Power: {m_power}, Accuracy: {m_accuracy})")
        count += 1

if __name__ == '__main__':
    try:
        db = psycopg2.connect(dbname="ass2")
        main()
    except psycopg2.Error as err:
        print("DB error: ", err)
    except Exception as err:
        print("Internal Error: ", err)
        raise err
    finally:
        if db is not None:
            db.close()
    sys.exit(0)
