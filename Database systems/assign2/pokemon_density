#! /usr/bin/env python3


"""
COMP3311
23T1
Assignment 2
Pokemon Database

Written by: Ezekiel Tay z5378748
Written on: 7/4/2023

Pokemon Density

Find the density of pokemon in each location within a given region.
"""


import sys
import psycopg2
import helpers
import math

#Class
class location_density:
    def __init__(self, location, avg_density):
        self.location = location
        self.avg_density = avg_density

### Constants
USAGE = f"Usage: {sys.argv[0]} <Region>"


### Globals
db = None
Region = None


### Command-line args
if len(sys.argv) != 2:
    print(USAGE, file=sys.stderr)
    sys.exit(1)
Region = helpers.clean(sys.argv[1])

# Helper function to calculate pokemon density
def calculate_pokemon_density(avg_height, avg_weight, rarity):
    radius = avg_height * 100 / 2
    volume = 4 / 3 * math.pi * radius ** 3
    density = avg_weight * 1000 / volume
    scale_factor = rarity / 100
    density = density * scale_factor
    return density


def main():
    cur = db.cursor()
    # Check if region exists in pokemon
    check_valid_region_query = f"select distinct region from games"
    valid_region_tuples = helpers.run_query_fetchall(db, check_valid_region_query)
    valid_region_flag = False
    for region, in valid_region_tuples:
        if region == Region:
            valid_region_flag = True

    # Return an error if the region is invalid.
    if valid_region_flag == False:
        print(f"'{Region}' isn't a region in the Pokemon series.", file=sys.stderr)
        return
    
    filter_locations_query = f"select distinct l_name from density_data where g_region = '{Region}'"
    location_tuples = helpers.run_query_fetchall(db, filter_locations_query)
    location_name_list = []
    
    # Store all location names with a pokemon encounter in a list.
    for location_name, in location_tuples:
        location_name_list.append(location_name)
    all_pokemons_in_region_query = f"select g_id, l_name, p_height, p_weight, p_rarity from density_data where g_region = '{Region}'"
    pokemon_tuples = helpers.run_query_fetchall(db, all_pokemons_in_region_query)
    
    # Find the pokemon density of the locations with pokemon encounters
    location_density_list = []
    max_l_name_len = 0
    for location in location_name_list:
        avg_density = 0
        distinct_game_id_list = set()

        # Determine longest length of location string
        if max_l_name_len < len(location):
            max_l_name_len = len(location) + 1

        # Loop through list of pokemon encounters in that Region.
        for g_id, l_name, p_height, p_weight, p_rarity in pokemon_tuples:
            if l_name == location:
                avg_density += calculate_pokemon_density(p_height, p_weight, p_rarity)
                distinct_game_id_list.add(g_id)

        # Find average density of that location.
        avg_density = avg_density / len(distinct_game_id_list)
        avg_density = round(avg_density, 4)
        location_density_list.append(location_density(location, avg_density))

    # Sort the density list by density first then location
    location_density_list.sort(key = lambda x: (- x.avg_density, x.location))

    print(f"The average density of Pokemon within each location in the '{Region}' region:")
    for each_location in location_density_list:
        each_location.location += ":"
        print(f"{each_location.location:<{max_l_name_len + 1}} {each_location.avg_density:.4f}")

    
    print()   
    # Create view showing all locations in game
    all_locations_in_region_view = f"""
        create or replace view all_locations_in_region
        as
        select distinct l.name as l_name
        from locations l
            join games g on (l.Appears_In = g.ID)
        where g.region = '{Region}'
    """
    cur.execute(all_locations_in_region_view)
    
    # Find locations with no_pokemon_encounters 
    location_no_pokemon_query = f"select * from all_locations_in_region where l_name not in ({filter_locations_query}) order by l_name"
    location_no_pokemon_tuples = helpers.run_query_fetchall(db, location_no_pokemon_query)
    print(f"The following locations in the '{Region}' region have no wild Pokemon encounters:")
    print()
    for l_name, in location_no_pokemon_tuples:
        print(f"\t{l_name}")
    print()
    

if __name__ == '__main__':
    try:
        db = psycopg2.connect(dbname="ass2")
        main()
    except psycopg2.Error as err:
        print("DB error: ", err)
    except Exception as err:
        print("Internal Error: ", err)
        raise err
    finally:
        if db is not None:
            db.close()
    sys.exit(0)
